Running tests...

✓ Runtime Behaviors and Edge Cases (26 tests)
  ✓ large array operations (4.009ms)
  ✓ nested object creation (180µs)
  ✓ string concatenation performance (1.573ms)
  ✓ object property access patterns (499µs)
  ✓ object reference cleanup (136µs)
  ✓ circular reference handling (57µs)
  ✓ closure memory retention (100µs)
  ✓ deep recursion handling (163µs)
  ✓ mutual recursion (176µs)
  ✓ tail recursion alternative (262µs)
  ✓ timeout simulation with busy wait (49.728ms)
  ✓ callback pattern simulation (10.008ms)
  ✓ event queue simulation (99µs)
  ✓ error bubbling through call stack (48µs)
  ✓ error recovery strategies (56µs)
  ✓ error context preservation (69µs)
  ✓ event listener cleanup simulation (59µs)
  ✓ timer cleanup simulation (78µs)
  ✓ resource pool management (89µs)
  ✓ feature detection pattern (60µs)
  ✓ polyfill pattern simulation (50µs)
  ✓ safe property access pattern (79µs)
  ✓ memoization pattern (210µs)
  ✓ debounce pattern (144µs)
  ✓ throttle pattern (50.953ms)
  ✓ lazy initialization pattern (127µs)

✓ default (25 tests)
  ✓ basic test (39µs)
  ✓ setTimeout should be available globally (34µs)
  ✓ setTimeout should execute callback after delay (137µs)
  ✓ setTimeout should return a timer ID (114µs)
  ✓ setTimeout should execute immediately with 0 delay (72µs)
  ✓ setTimeout should pass arguments to callback (207µs)
  ✓ setTimeout should handle multiple concurrent timers (29µs)
  ✓ clearTimeout should be available globally (33µs)
  ✓ clearTimeout should cancel a timeout (23µs)
  ✓ clearTimeout should handle invalid timer IDs gracefully (53µs)
  ✓ setInterval should be available globally (39µs)
  ✓ setInterval should execute callback repeatedly (29µs)
  ✓ setInterval should return a timer ID (63µs)
  ✓ setInterval should pass arguments to callback (25µs)
  ✓ setInterval should handle minimum interval correctly (21µs)
  ✓ clearInterval should be available globally (35µs)
  ✓ clearInterval should stop interval execution (21µs)
  ✓ clearInterval should handle invalid timer IDs gracefully (31µs)
  ✓ setTimeout and setInterval should have different ID spaces (38µs)
  ✓ clearing wrong timer type should not affect other timers (26µs)
  ✓ multiple timers should execute in correct order (24µs)
  ✓ setTimeout should handle non-function callbacks gracefully (61µs)
  ✓ setInterval should handle non-function callbacks gracefully (38µs)
  ✓ setTimeout should handle negative delays (27µs)
  ✓ setInterval should handle very small intervals (45µs)

✗ Advanced Testing Patterns (17 tests)
  ✓ this test should run normally (44µs)
  - this test should be skipped (skipped)
  ✓ another normal test (51µs)
  ✓ mock function call tracking (107µs)
  ✓ dependency injection pattern (92µs)
  ✗ execution time measurement (774µs)
    Error: runtime error: slice bounds out of range [:-1]
  ✓ memory usage pattern (729µs)
  ✓ algorithmic complexity comparison (319µs)
  ✓ door state machine (120µs)
  ✓ user authentication state machine (112µs)
  ✓ simple query building (224µs)
  ✓ complex query building (244µs)
  ✓ event subscription and emission (127µs)
  ✓ user activity tracking with events (111µs)
  ✓ pure function testing (49µs)
  ✓ immutability testing (127µs)
  ✓ higher-order function testing (131µs)

✗ JavaScript Language Features (47 tests)
  ✓ var hoisting behavior (43µs)
  ✓ let and const block scoping (72µs)
  ✓ const immutability (52µs)
  ✓ function declaration hoisting (36µs)
  ✓ function expression behavior (46µs)
  ✓ arrow function behavior (50µs)
  ✓ function parameter defaults (56µs)
  ✓ rest parameters (59µs)
  ✓ destructuring parameters (58µs)
  ✓ object property access (65µs)
  ✓ object property assignment (45µs)
  ✗ object destructuring (155µs)
    Error: TypeError: Value is not an object: undefined at <eval>:282:25(21)
  ✓ array destructuring (161µs)
  ✓ spread operator with arrays (309µs)
  ✓ spread operator with objects (60µs)
  ✓ map transformation (52µs)
  ✓ filter operations (64µs)
  ✓ reduce operations (59µs)
  ✓ find and findIndex (74µs)
  ✓ some and every (59µs)
  ✓ sort operations (72µs)
  ✓ string methods (105µs)
  ✓ string splitting and joining (65µs)
  ✓ template literals (33µs)
  ✓ string replacement (83µs)
  ✓ string padding (48µs)
  ✓ basic regex matching (56µs)
  ✓ regex with flags (60µs)
  ✓ regex groups (60µs)
  ✓ regex replacement (37µs)
  ✓ date creation and manipulation (112µs)
  ✓ date arithmetic (40µs)
  ✓ date formatting (148µs)
  ✓ try-catch basic usage (91µs)
  ✓ finally block execution (55µs)
  ✓ custom error types (126µs)
  ✓ typeof operator (210µs)
  ✓ instanceof operator (71µs)
  ✓ type conversion (154µs)
  ✓ parsing numbers (92µs)
  ✓ Object.keys, Object.values, Object.entries (70µs)
  ✓ Object.assign (54µs)
  ✓ property descriptors (50µs)
  ✓ hasOwnProperty and in operator (76µs)
  ✓ JSON stringify and parse (87µs)
  ✓ JSON with arrays (66µs)
  ✓ JSON edge cases (56µs)

✗ Error Handling and Edge Cases (30 tests)
  ✓ basic error throwing (60µs)
  ✓ different error types (67µs)
  ✓ conditional error throwing (218µs)
  ✓ error in nested function calls (69µs)
  ✓ normal division (109µs)
  ✓ division by zero (206µs)
  ✓ invalid input types (92µs)
  ✓ extreme values (55µs)
  ✓ valid values (110µs)
  ✓ null handling (34µs)
  ✓ undefined handling (35µs)
  ✓ falsy but valid values (59µs)
  ✓ empty arrays (62µs)
  ✓ sparse arrays (70µs)
  ✓ empty objects (56µs)
  ✓ nested null/undefined in objects (64µs)
  ✓ empty strings (56µs)
  ✓ whitespace strings (88µs)
  ✓ special characters (75µs)
  ✓ special numeric values (78µs)
  ✓ NaN behavior (50µs)
  ✓ floating point precision (156µs)
  ✓ integer overflow behavior (81µs)
  ✓ successful operation (56µs)
  ✓ operation with fallback (121µs)
  ✗ complex error recovery (72µs)
    Error: ReferenceError: Cannot access a variable before initialization at <eval>:42:23(3)
  ✓ state isolation test 1 (231µs)
  ✓ state isolation test 2 (70µs)
  ✓ error in state modification (63µs)
  ✓ state recovery after error (37µs)

✓ Edge Cases and Gotchas (4 tests)
  ✓ floating point precision (38µs)
  ✓ type coercion awareness (77µs)
  ✓ object reference vs value equality (71µs)
  ✓ array reference vs value equality (56µs)

✗ Async and Timing Tests (12 tests)
  ✓ fast test should complete quickly (49µs)
  ✓ medium duration test (5.515ms)
  ✓ test with generous timeout (4.761ms)
  ✗ simulated async data processing (5.058ms)
    Error: runtime error: index out of range [29] with length 26
  ✗ simulated async error handling (4.983ms)
    Error: runtime error: index out of range [34] with length 32
  ✓ simulated batch processing (19.243ms)
  ✓ array creation performance (255µs)
  ✓ string manipulation performance (21µs)
  ✓ object manipulation performance (144µs)
  ✓ should pass with default timeout (36µs)
  ✓ should handle zero work gracefully (35µs)
  ✓ deliberate timeout test (50.822ms)

✗ Basic HTTP (5 tests)
  ✗ fetch should be available globally (54µs)
    Error: expected undefined to be less than or equal to 17
  ✓ fetch should return a Promise-like object (74µs)
  ✓ fetch should handle simple GET request (199µs)
  ✓ fetch should handle options object (95µs)
  ✓ fetch should handle POST method (61µs)

✓ Hook Setup Patterns (9 tests)
  ✓ database insert operation (307µs)
  ✓ database query operation (74µs)
  ✓ database isolation verification (53µs)
  ✓ resource allocation (84µs)
  ✓ resource pool exhaustion (53µs)
  ✓ resource cleanup verification (55µs)
  ✓ increment counter (53µs)
  ✓ increment counter again (62µs)
  ✓ verify counter history (49µs)

✓ HTTP Module (fetch) (9 tests)
  ✓ fetch should be available globally (36µs)
  ✓ fetch should return a Promise (50µs)
  ✓ fetch should make GET request successfully (28µs)
  ✓ fetch should handle POST requests with JSON (29µs)
  ✓ fetch should handle custom headers (25µs)
  ✓ fetch should handle HTTP errors (21µs)
  ✓ fetch should handle network errors (23µs)
  ✓ fetch should handle timeout option (21µs)
  ✓ fetch should handle different HTTP methods (39µs)

✓ Expectation Matchers (12 tests)
  ✓ toBe - strict equality (264µs)
  ✓ toEqual - deep equality (126µs)
  ✓ not matchers (228µs)
  ✓ toBeTruthy (116µs)
  ✓ toBeFalsy (72µs)
  ✓ toBeNull (64µs)
  ✓ toThrow - function throws error (60µs)
  ✓ toThrow - function does not throw (31µs)
  ✓ toThrow - specific error types (46µs)
  ✓ objects (67µs)
  ✓ arrays (115µs)
  ✓ nested structures (84µs)

✓ Top Level Suite (14 tests)
  ✓ top level test (48µs)
  ✓ level 1 test A (137µs)
  ✓ level 1 test B (54µs)
  ✓ level 2A test 1 (304µs)
  ✓ level 2A test 2 (44µs)
  ✓ deeply nested test 1 (82µs)
  ✓ deeply nested test 2 (51µs)
  ✓ level 2B test 1 (61µs)
  ✓ level 2B test 2 (49µs)
  ✓ level 2B test 3 (47µs)
  ✓ parallel suite test 1 (51µs)
  ✓ parallel suite test 2 (37µs)
  ✓ parallel nested test 1 (69µs)
  ✓ parallel nested test 2 (60µs)

✓ Isolated Suite (2 tests)
  ✓ isolated test (55µs)
  ✓ nested isolated test (38µs)

✓ Testing Patterns Demo (6 tests)
  ✓ resource creation test (74µs)
  ✓ resource modification test (67µs)
  ✓ resource independence test (57µs)
  ✓ filtering patterns (59µs)
  ✓ mapping patterns (44µs)
  ✓ reduction patterns (36µs)

✓ Basic Timers (5 tests)
  ✓ setTimeout basic functionality (43µs)
  ✓ setInterval basic functionality (42µs)
  ✓ clearTimeout basic functionality (49µs)
  ✓ clearInterval basic functionality (49µs)
  ✓ timer IDs are unique (59µs)

✓ Data-Driven Testing Patterns (77 tests)
  ✓ addition: 2 and 3 should equal 5 (31µs)
  ✓ subtraction: 10 and 4 should equal 6 (27µs)
  ✓ multiplication: 6 and 7 should equal 42 (31µs)
  ✓ division: 15 and 3 should equal 5 (32µs)
  ✓ email validation: valid email (170µs)
  ✓ email validation: invalid email format (66µs)
  ✓ email validation: email without TLD (59µs)
  ✓ email validation: empty email (50µs)
  ✓ phone validation: valid US phone (49µs)
  ✓ phone validation: valid phone without country code (177µs)
  ✓ phone validation: too short phone (30µs)
  ✓ phone validation: invalid phone format (32µs)
  ✓ age validation: valid adult age (29µs)
  ✓ age validation: minimum adult age (28µs)
  ✓ age validation: underage (34µs)
  ✓ age validation: negative age (34µs)
  ✓ age validation: unrealistic age (30µs)
  ✓ uppercase: "hello world" should become "HELLO WORLD" (39µs)
  ✓ lowercase: "HELLO WORLD" should become "hello world" (38µs)
  ✓ capitalize: "hello world" should become "Hello World" (42µs)
  ✓ camelCase: "hello-world" should become "helloWorld" (35µs)
  ✓ kebabCase: "HelloWorld" should become "hello-world" (39µs)
  ✓ trim: "  hello world  " should become "hello world" (36µs)
  ✓ reverse: "hello world" should become "dlrow olleh" (32µs)
  ✓ repeat3: "hello" should become "hellohellohello" (35µs)
  ✓ sum of positive numbers (41µs)
  ✓ sum with negative numbers (39µs)
  ✓ average of numbers (40µs)
  ✓ maximum value (48µs)
  ✓ minimum value (47µs)
  ✓ filter even numbers (43µs)
  ✓ double all values (39µs)
  ✓ edge case 0: null type detection (49µs)
  ✓ edge case 1: null type detection (40µs)
  ✓ edge case 2: "" type detection (48µs)
  ✓ edge case 3: 0 type detection (46µs)
  ✓ edge case 4: -0 type detection (44µs)
  ✓ edge case 5: 1 type detection (46µs)
  ✓ edge case 6: -1 type detection (52µs)
  ✓ edge case 7: null type detection (47µs)
  ✓ edge case 8: null type detection (47µs)
  ✓ edge case 9: null type detection (50µs)
  ✓ edge case 10: true type detection (52µs)
  ✓ edge case 11: false type detection (45µs)
  ✓ edge case 12: [] type detection (45µs)
  ✓ edge case 13: {} type detection (45µs)
  ✓ edge case 14: "string" type detection (49µs)
  ✓ admin read access to user-data (51µs)
  ✓ admin read access to system-config (40µs)
  ✓ admin read access to logs (37µs)
  ✓ admin write access to user-data (48µs)
  ✓ admin write access to system-config (146µs)
  ✓ admin write access to logs (77µs)
  ✓ admin delete access to user-data (87µs)
  ✓ admin delete access to system-config (57µs)
  ✓ admin delete access to logs (123µs)
  ✓ user read access to user-data (150µs)
  ✓ user read access to system-config (43µs)
  ✓ user read access to logs (29µs)
  ✓ user write access to user-data (33µs)
  ✓ user write access to system-config (48µs)
  ✓ user write access to logs (41µs)
  ✓ user delete access to user-data (45µs)
  ✓ user delete access to system-config (54µs)
  ✓ user delete access to logs (38µs)
  ✓ guest read access to user-data (44µs)
  ✓ guest read access to system-config (60µs)
  ✓ guest read access to logs (41µs)
  ✓ guest write access to user-data (39µs)
  ✓ guest write access to system-config (55µs)
  ✓ guest write access to logs (39µs)
  ✓ guest delete access to user-data (51µs)
  ✓ guest delete access to system-config (49µs)
  ✓ guest delete access to logs (52µs)
  ✓ configuration for development environment (57µs)
  ✓ configuration for production environment (58µs)
  ✓ configuration for testing environment (53µs)

✓ Test Hooks Comprehensive Demo (5 tests)
  ✓ first test in main suite (63µs)
  ✓ second test in main suite (50µs)
  ✓ test in nested suite A (93µs)
  ✓ deeply nested test (89µs)
  ✓ test in nested suite B (85µs)

✓ Hook Error Handling (6 tests)
  ✓ test after successful beforeAll (27µs)
  ✓ simulate beforeEach error handling (73µs)
  ✓ recovery after simulated error (45µs)
  ✓ demonstrate hook error patterns (195µs)
  ✓ test with normal afterEach (100µs)
  ✓ test after normal afterEach (66µs)

==================================================
Test Results Summary
==================================================
Test Suites: 18 total, 13 passed, 5 failed
Tests:       311 total, 304 passed, 6 failed, 1 skipped
Time:        239ms
Status:      ❌ FAILED

Failed Suites:
  ❌ Advanced Testing Patterns (1/17 tests failed)
  ❌ JavaScript Language Features (1/47 tests failed)
  ❌ Error Handling and Edge Cases (1/30 tests failed)
  ❌ Async and Timing Tests (2/12 tests failed)
  ❌ Basic HTTP (1/5 tests failed)

All Suites:
  ✓ Runtime Behaviors and Edge Cases - 26 tests (119ms)
  ✓ default - 25 tests (1ms)
  ✗ Advanced Testing Patterns - 17 tests (15 passed, 1 failed, 1 skipped) (3ms)
  ✗ JavaScript Language Features - 47 tests (46 passed, 1 failed) (4ms)
  ✗ Error Handling and Edge Cases - 30 tests (29 passed, 1 failed) (3ms)
  ✓ Edge Cases and Gotchas - 4 tests (0s)
  ✗ Async and Timing Tests - 12 tests (10 passed, 2 failed) (91ms)
  ✗ Basic HTTP - 5 tests (4 passed, 1 failed) (0s)
  ✓ Hook Setup Patterns - 9 tests (1ms)
  ✓ HTTP Module (fetch) - 9 tests (0s)
  ✓ Expectation Matchers - 12 tests (1ms)
  ✓ Top Level Suite - 14 tests (1ms)
  ✓ Isolated Suite - 2 tests (0s)
  ✓ Testing Patterns Demo - 6 tests (0s)
  ✓ Basic Timers - 5 tests (0s)
  ✓ Data-Driven Testing Patterns - 77 tests (4ms)
  ✓ Test Hooks Comprehensive Demo - 5 tests (0s)
  ✓ Hook Error Handling - 6 tests (1ms)
